// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  adminId        String?
  name           String?
  userName       String?
  banner         String?
  profilePicture String?
  email          String?      @unique
  discord        String?
  twitter        String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Admin          Admin?       @relation(fields: [adminId], references: [id])
  Commission     Commission[]
  Portfolio      Portfolio[]
  Order          Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Admin {
  id    String  @id @default(cuid())
  users User[]
  Order Order[]
}

model Commission {
  id              String @id @default(cuid())
  name            String
  price           Float
  descriptionHtml String
  descriptionJson String

  Categorys CommissionCategory[]
  images    CommissionImage[]
  Portfolio Portfolio[]

  user   User    @relation(fields: [userId], references: [id])
  userId String
  Order  Order[]
}

model CommissionImage {
  id     String  @id @default(cuid())
  url    String
  hash   String?
  width  Int?
  height Int?

  Commission   Commission? @relation(fields: [commissionId], references: [id])
  commissionId String?
}

model CommissionCategory {
  id              String         @id @default(cuid())
  commissionId    String?
  name            String
  descriptionHtml String?
  descriptionJson String?
  Commission      Commission?    @relation(fields: [commissionId], references: [id])
  OrderMessage    OrderMessage[]
}

model Portfolio {
  id     String  @id @default(cuid())
  url    String
  hash   String?
  width  Int?
  height Int?

  commission   Commission? @relation(fields: [commissionId], references: [id])
  commissionId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Order {
  id           String         @id @default(cuid())
  userId       String
  commissionId String
  adminId      String
  messages     OrderMessage[]
  artist       Admin          @relation(fields: [adminId], references: [id])
  user         User?          @relation(fields: [userId], references: [id])
  commission   Commission     @relation(fields: [commissionId], references: [id])
  discord      String?
  twitter      String?
  type         String         @default("not_approved")
}

model OrderMessage {
  id                   String             @id @default(cuid())
  type                 String
  content              String
  orderId              String?
  commissionCategoryId String
  category             CommissionCategory @relation(fields: [commissionCategoryId], references: [id])
  Order                Order?             @relation(fields: [orderId], references: [id])
}
